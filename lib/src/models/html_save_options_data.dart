/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="html_save_options_data.dart">
 *   Copyright (c) 2025 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */

library aspose_words_cloud;

import '../../aspose_words_cloud.dart';

/// Container class for html save options.
class HtmlSaveOptionsData extends SaveOptionsData {
  /// Gets or sets a value indicating whether negative left and right indents of paragraphs are allowed (not normalized).
  bool? _allowNegativeIndent;

  bool? get allowNegativeIndent => _allowNegativeIndent;
  set allowNegativeIndent(bool? val) => _allowNegativeIndent = val;


  /// Gets or sets the prefix which is added to all CSS class names. The default value is an empty string and generated CSS class names have no common prefix.
  /// If this value is not empty, all CSS classes generated by Aspose.Words will start with the specified prefix.This might be useful, for example, if you add custom CSS to generated documents and want to prevent class name conflicts.
  /// If the value is not null or empty, it must be a valid CSS identifier.
  String? _cssClassNamePrefix;

  String? get cssClassNamePrefix => _cssClassNamePrefix;
  set cssClassNamePrefix(String? val) => _cssClassNamePrefix = val;


  /// Gets or sets the name of the CSS file written when the document is exported to HTML.
  String? _cssStyleSheetFileName;

  String? get cssStyleSheetFileName => _cssStyleSheetFileName;
  set cssStyleSheetFileName(String? val) => _cssStyleSheetFileName = val;


  /// Gets or sets the option that controls how the CSS styles are exported.
  HtmlSaveOptionsData_CssStyleSheetTypeEnum? _cssStyleSheetType;

  HtmlSaveOptionsData_CssStyleSheetTypeEnum? get cssStyleSheetType => _cssStyleSheetType;
  set cssStyleSheetType(HtmlSaveOptionsData_CssStyleSheetTypeEnum? val) => _cssStyleSheetType = val;


  /// Gets or sets the option that controls how the document should be split when saving.
  HtmlSaveOptionsData_DocumentSplitCriteriaEnum? _documentSplitCriteria;

  HtmlSaveOptionsData_DocumentSplitCriteriaEnum? get documentSplitCriteria => _documentSplitCriteria;
  set documentSplitCriteria(HtmlSaveOptionsData_DocumentSplitCriteriaEnum? val) => _documentSplitCriteria = val;


  /// Gets or sets the maximum level of headings at which to split the document.
  int? _documentSplitHeadingLevel;

  int? get documentSplitHeadingLevel => _documentSplitHeadingLevel;
  set documentSplitHeadingLevel(int? val) => _documentSplitHeadingLevel = val;


  /// Gets or sets the character encoding to use when exporting.
  String? _encoding;

  String? get encoding => _encoding;
  set encoding(String? val) => _encoding = val;


  /// Gets or sets a value indicating whether to export built-in and custom document properties.
  bool? _exportDocumentProperties;

  bool? get exportDocumentProperties => _exportDocumentProperties;
  set exportDocumentProperties(bool? val) => _exportDocumentProperties = val;


  /// Gets or sets the flag, that controls how drop-down form fields are saved to HTML.
  /// The default value is false.
  /// When set to true, exports drop-down form fields as normal text.
  /// When false, exports drop-down form fields as SELECT element in HTML.
  bool? _exportDropDownFormFieldAsText;

  bool? get exportDropDownFormFieldAsText => _exportDropDownFormFieldAsText;
  set exportDropDownFormFieldAsText(bool? val) => _exportDropDownFormFieldAsText = val;


  /// Gets or sets a value indicating whether font resources should be exported.
  bool? _exportFontResources;

  bool? get exportFontResources => _exportFontResources;
  set exportFontResources(bool? val) => _exportFontResources = val;


  /// Gets or sets a value indicating whether fonts resources should be embedded to HTML in Base64 encoding. The default value is false.
  bool? _exportFontsAsBase64;

  bool? get exportFontsAsBase64 => _exportFontsAsBase64;
  set exportFontsAsBase64(bool? val) => _exportFontsAsBase64 = val;


  /// Gets or sets the option that controls how headers and footers are exported.
  HtmlSaveOptionsData_ExportHeadersFootersModeEnum? _exportHeadersFootersMode;

  HtmlSaveOptionsData_ExportHeadersFootersModeEnum? get exportHeadersFootersMode => _exportHeadersFootersMode;
  set exportHeadersFootersMode(HtmlSaveOptionsData_ExportHeadersFootersModeEnum? val) => _exportHeadersFootersMode = val;


  /// Gets or sets a value indicating whether images are saved in Base64 format.
  bool? _exportImagesAsBase64;

  bool? get exportImagesAsBase64 => _exportImagesAsBase64;
  set exportImagesAsBase64(bool? val) => _exportImagesAsBase64 = val;


  /// Gets or sets a value indicating whether language information is exported.
  bool? _exportLanguageInformation;

  bool? get exportLanguageInformation => _exportLanguageInformation;
  set exportLanguageInformation(bool? val) => _exportLanguageInformation = val;


  /// Gets or sets the option that controls how list labels are exported.
  HtmlSaveOptionsData_ExportListLabelsEnum? _exportListLabels;

  HtmlSaveOptionsData_ExportListLabelsEnum? get exportListLabels => _exportListLabels;
  set exportListLabels(HtmlSaveOptionsData_ExportListLabelsEnum? val) => _exportListLabels = val;


  /// Gets or sets a value indicating whether the original URL should be used as the URL of the linked images.
  /// The default value is false.
  /// If value is set to true - ResourceFolder value is used as the URL of linked images and linked images are not loaded into document's folder or ImagesFolder.If value is set to false - linked images are loaded into document's folder or ImagesFolder and URL of each linked image is constructed depending on document's folder, ImagesFolder and ImagesFolderAlias properties.
  bool? _exportOriginalUrlForLinkedImages;

  bool? get exportOriginalUrlForLinkedImages => _exportOriginalUrlForLinkedImages;
  set exportOriginalUrlForLinkedImages(bool? val) => _exportOriginalUrlForLinkedImages = val;


  /// Gets or sets a value indicating whether page margins are exported to HTML, MHTML or EPUB.
  /// The default value is false.
  /// Aspose.Words does not show area of page margins by default. If any elements are completely or partially clipped by the document edge the displayed area can be extended with this option.
  bool? _exportPageMargins;

  bool? get exportPageMargins => _exportPageMargins;
  set exportPageMargins(bool? val) => _exportPageMargins = val;


  /// Gets or sets a value indicating whether page setup is exported.
  bool? _exportPageSetup;

  bool? get exportPageSetup => _exportPageSetup;
  set exportPageSetup(bool? val) => _exportPageSetup = val;


  /// Gets or sets a value indicating whether font sizes should be output in relative units when saving.
  bool? _exportRelativeFontSize;

  bool? get exportRelativeFontSize => _exportRelativeFontSize;
  set exportRelativeFontSize(bool? val) => _exportRelativeFontSize = val;


  /// Gets or sets a value indicating whether to write the roundtrip information when saving to HTML. The default value is true.
  /// Saving of the roundtrip information allows to restore document properties such as tab stops, comments, headers and footers during the HTML documents loading back into a Document object.When true, the roundtrip information is exported as -aw-* CSS properties of the corresponding HTML elements.When false, causes no roundtrip information to be output into produced files.
  bool? _exportRoundtripInformation;

  bool? get exportRoundtripInformation => _exportRoundtripInformation;
  set exportRoundtripInformation(bool? val) => _exportRoundtripInformation = val;


  /// Gets or sets the flag, that controls how text input form fields are saved.
  bool? _exportTextInputFormFieldAsText;

  bool? get exportTextInputFormFieldAsText => _exportTextInputFormFieldAsText;
  set exportTextInputFormFieldAsText(bool? val) => _exportTextInputFormFieldAsText = val;


  /// Gets or sets a value indicating whether to write page numbers to table of contents when saving.
  bool? _exportTocPageNumbers;

  bool? get exportTocPageNumbers => _exportTocPageNumbers;
  set exportTocPageNumbers(bool? val) => _exportTocPageNumbers = val;


  /// Gets or sets a value indicating whether to write the DOCTYPE declaration when saving.
  bool? _exportXhtmlTransitional;

  bool? get exportXhtmlTransitional => _exportXhtmlTransitional;
  set exportXhtmlTransitional(bool? val) => _exportXhtmlTransitional = val;


  /// Gets or sets the option that controls which font resources need subsetting when saving.
  int? _fontResourcesSubsettingSizeThreshold;

  int? get fontResourcesSubsettingSizeThreshold => _fontResourcesSubsettingSizeThreshold;
  set fontResourcesSubsettingSizeThreshold(int? val) => _fontResourcesSubsettingSizeThreshold = val;


  /// Gets or sets the physical folder where fonts are saved when exporting a document.
  String? _fontsFolder;

  String? get fontsFolder => _fontsFolder;
  set fontsFolder(String? val) => _fontsFolder = val;


  /// Gets or sets the name of the folder used to construct font URIs.
  String? _fontsFolderAlias;

  String? get fontsFolderAlias => _fontsFolderAlias;
  set fontsFolderAlias(String? val) => _fontsFolderAlias = val;


  /// Gets or sets the version of HTML standard, that should be used when saving the document to HTML or MHTML.
  /// Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.
  HtmlSaveOptionsData_HtmlVersionEnum? _htmlVersion;

  HtmlSaveOptionsData_HtmlVersionEnum? get htmlVersion => _htmlVersion;
  set htmlVersion(HtmlSaveOptionsData_HtmlVersionEnum? val) => _htmlVersion = val;


  /// Gets or sets the output resolution for images when exporting.
  int? _imageResolution;

  int? get imageResolution => _imageResolution;
  set imageResolution(int? val) => _imageResolution = val;


  /// Gets or sets the physical folder where images are saved when exporting a document.
  String? _imagesFolder;

  String? get imagesFolder => _imagesFolder;
  set imagesFolder(String? val) => _imagesFolder = val;


  /// Gets or sets the name of the folder used to construct image URIs.
  String? _imagesFolderAlias;

  String? get imagesFolderAlias => _imagesFolderAlias;
  set imagesFolderAlias(String? val) => _imagesFolderAlias = val;


  /// Gets or sets the options, that controls in what format metafiles are saved when exporting to HTML, MHTML, or EPUB.
  /// The default value is Aspose.Words.Saving.HtmlMetafileFormat.Png, meaning that metafiles are rendered to raster PNG images.
  /// Metafiles are not natively displayed by HTML browsers. By default, Aspose.Words converts WMF and EMF images into PNG files when exporting to HTML.Other options are to convert metafiles to SVG images or to export them as is without conversion.
  /// Some image transforms, in particular image cropping, will not be applied to metafile images if they are exported to HTML without conversion.
  HtmlSaveOptionsData_MetafileFormatEnum? _metafileFormat;

  HtmlSaveOptionsData_MetafileFormatEnum? get metafileFormat => _metafileFormat;
  set metafileFormat(HtmlSaveOptionsData_MetafileFormatEnum? val) => _metafileFormat = val;


  /// Gets or sets the option that controls how OfficeMath objects are exported to HTML, MHTML or EPUB. The default value is HtmlOfficeMathOutputMode.Image.
  HtmlSaveOptionsData_OfficeMathOutputModeEnum? _officeMathOutputMode;

  HtmlSaveOptionsData_OfficeMathOutputModeEnum? get officeMathOutputMode => _officeMathOutputMode;
  set officeMathOutputMode(HtmlSaveOptionsData_OfficeMathOutputModeEnum? val) => _officeMathOutputMode = val;


  /// Gets or sets a value indicating whether to use pretty formats output.
  bool? _prettyFormat;

  bool? get prettyFormat => _prettyFormat;
  set prettyFormat(bool? val) => _prettyFormat = val;


  /// Gets or sets the flag that indicates whether backslash characters should be replaced with yen signs.
  /// Default value is false.
  /// By default, Aspose.Words mimics MS Word's behavior and doesn't replace backslash characters with yen signs in
  /// generated HTML documents. However, previous versions of Aspose.Words performed such replacements in certain
  /// scenarios. This flag enables backward compatibility with previous versions of Aspose.Words.
  bool? _replaceBackslashWithYenSign;

  bool? get replaceBackslashWithYenSign => _replaceBackslashWithYenSign;
  set replaceBackslashWithYenSign(bool? val) => _replaceBackslashWithYenSign = val;


  /// Gets or sets a value indicating whether font family names used in the document are resolved and substituted according to FontSettings when being written into HTML-based formats.
  /// The default value is false.
  bool? _resolveFontNames;

  bool? get resolveFontNames => _resolveFontNames;
  set resolveFontNames(bool? val) => _resolveFontNames = val;


  /// Gets or sets the physical folder where all resources like images, fonts, and external CSS are saved when a document is exported to HTML. The default value is an empty string.
  String? _resourceFolder;

  String? get resourceFolder => _resourceFolder;
  set resourceFolder(String? val) => _resourceFolder = val;


  /// Gets or sets the name of the folder used to construct URIs of all resources written into HTML document. The default value is an empty string.
  String? _resourceFolderAlias;

  String? get resourceFolderAlias => _resourceFolderAlias;
  set resourceFolderAlias(String? val) => _resourceFolderAlias = val;


  /// Gets or sets a value indicating whether images are scaled by Aspose.Words to the bounding shape size when exporting.
  bool? _scaleImageToShapeSize;

  bool? get scaleImageToShapeSize => _scaleImageToShapeSize;
  set scaleImageToShapeSize(bool? val) => _scaleImageToShapeSize = val;


  /// Gets or sets the option that controls how table, row and cell widths are exported.
  HtmlSaveOptionsData_TableWidthOutputModeEnum? _tableWidthOutputMode;

  HtmlSaveOptionsData_TableWidthOutputModeEnum? get tableWidthOutputMode => _tableWidthOutputMode;
  set tableWidthOutputMode(HtmlSaveOptionsData_TableWidthOutputModeEnum? val) => _tableWidthOutputMode = val;


  /// Gets the format of save.
  String? _saveFormat = 'html';

  @override
  String? get saveFormat => _saveFormat;


  @override
  void deserialize(Map<String, dynamic>? json) {
    if (json == null) {
      throw ApiException(400, 'Failed to deserialize HtmlSaveOptionsData data model.');
    }

    super.deserialize(json);
    if (json.containsKey('AllowEmbeddingPostScriptFonts')) {
      allowEmbeddingPostScriptFonts = json['AllowEmbeddingPostScriptFonts'] as bool;
    } else {
      allowEmbeddingPostScriptFonts = null;
    }

    if (json.containsKey('CustomTimeZoneInfoData')) {
      customTimeZoneInfoData = ModelBase.createInstance< TimeZoneInfoData >(json['CustomTimeZoneInfoData'] as Map<String, dynamic>);
    } else {
      customTimeZoneInfoData = null;
    }

    if (json.containsKey('Dml3DEffectsRenderingMode')) {
      switch (json['Dml3DEffectsRenderingMode'] as String) {
        case 'Basic': dml3DEffectsRenderingMode = SaveOptionsData_Dml3DEffectsRenderingModeEnum.basic; break;
        case 'Advanced': dml3DEffectsRenderingMode = SaveOptionsData_Dml3DEffectsRenderingModeEnum.advanced; break;
        default: dml3DEffectsRenderingMode = null; break;
      }
    } else {
      dml3DEffectsRenderingMode = null;
    }

    if (json.containsKey('DmlEffectsRenderingMode')) {
      switch (json['DmlEffectsRenderingMode'] as String) {
        case 'Simplified': dmlEffectsRenderingMode = SaveOptionsData_DmlEffectsRenderingModeEnum.simplified; break;
        case 'None': dmlEffectsRenderingMode = SaveOptionsData_DmlEffectsRenderingModeEnum.none; break;
        case 'Fine': dmlEffectsRenderingMode = SaveOptionsData_DmlEffectsRenderingModeEnum.fine; break;
        default: dmlEffectsRenderingMode = null; break;
      }
    } else {
      dmlEffectsRenderingMode = null;
    }

    if (json.containsKey('DmlRenderingMode')) {
      switch (json['DmlRenderingMode'] as String) {
        case 'Fallback': dmlRenderingMode = SaveOptionsData_DmlRenderingModeEnum.fallback; break;
        case 'DrawingML': dmlRenderingMode = SaveOptionsData_DmlRenderingModeEnum.drawingML; break;
        default: dmlRenderingMode = null; break;
      }
    } else {
      dmlRenderingMode = null;
    }

    if (json.containsKey('FileName')) {
      fileName = json['FileName'] as String;
    } else {
      fileName = null;
    }

    if (json.containsKey('ImlRenderingMode')) {
      switch (json['ImlRenderingMode'] as String) {
        case 'Fallback': imlRenderingMode = SaveOptionsData_ImlRenderingModeEnum.fallback; break;
        case 'InkML': imlRenderingMode = SaveOptionsData_ImlRenderingModeEnum.inkML; break;
        default: imlRenderingMode = null; break;
      }
    } else {
      imlRenderingMode = null;
    }

    if (json.containsKey('UpdateCreatedTimeProperty')) {
      updateCreatedTimeProperty = json['UpdateCreatedTimeProperty'] as bool;
    } else {
      updateCreatedTimeProperty = null;
    }

    if (json.containsKey('UpdateFields')) {
      updateFields = json['UpdateFields'] as bool;
    } else {
      updateFields = null;
    }

    if (json.containsKey('UpdateLastPrintedProperty')) {
      updateLastPrintedProperty = json['UpdateLastPrintedProperty'] as bool;
    } else {
      updateLastPrintedProperty = null;
    }

    if (json.containsKey('UpdateLastSavedTimeProperty')) {
      updateLastSavedTimeProperty = json['UpdateLastSavedTimeProperty'] as bool;
    } else {
      updateLastSavedTimeProperty = null;
    }

    if (json.containsKey('ZipOutput')) {
      zipOutput = json['ZipOutput'] as bool;
    } else {
      zipOutput = null;
    }

    if (json.containsKey('AllowNegativeIndent')) {
      allowNegativeIndent = json['AllowNegativeIndent'] as bool;
    } else {
      allowNegativeIndent = null;
    }

    if (json.containsKey('CssClassNamePrefix')) {
      cssClassNamePrefix = json['CssClassNamePrefix'] as String;
    } else {
      cssClassNamePrefix = null;
    }

    if (json.containsKey('CssStyleSheetFileName')) {
      cssStyleSheetFileName = json['CssStyleSheetFileName'] as String;
    } else {
      cssStyleSheetFileName = null;
    }

    if (json.containsKey('CssStyleSheetType')) {
      switch (json['CssStyleSheetType'] as String) {
        case 'Inline': cssStyleSheetType = HtmlSaveOptionsData_CssStyleSheetTypeEnum.inline; break;
        case 'Embedded': cssStyleSheetType = HtmlSaveOptionsData_CssStyleSheetTypeEnum.embedded; break;
        case 'External': cssStyleSheetType = HtmlSaveOptionsData_CssStyleSheetTypeEnum.external; break;
        default: cssStyleSheetType = null; break;
      }
    } else {
      cssStyleSheetType = null;
    }

    if (json.containsKey('DocumentSplitCriteria')) {
      switch (json['DocumentSplitCriteria'] as String) {
        case 'None': documentSplitCriteria = HtmlSaveOptionsData_DocumentSplitCriteriaEnum.none; break;
        case 'PageBreak': documentSplitCriteria = HtmlSaveOptionsData_DocumentSplitCriteriaEnum.pageBreak; break;
        case 'ColumnBreak': documentSplitCriteria = HtmlSaveOptionsData_DocumentSplitCriteriaEnum.columnBreak; break;
        case 'SectionBreak': documentSplitCriteria = HtmlSaveOptionsData_DocumentSplitCriteriaEnum.sectionBreak; break;
        case 'HeadingParagraph': documentSplitCriteria = HtmlSaveOptionsData_DocumentSplitCriteriaEnum.headingParagraph; break;
        default: documentSplitCriteria = null; break;
      }
    } else {
      documentSplitCriteria = null;
    }

    if (json.containsKey('DocumentSplitHeadingLevel')) {
      documentSplitHeadingLevel = json['DocumentSplitHeadingLevel'] as int;
    } else {
      documentSplitHeadingLevel = null;
    }

    if (json.containsKey('Encoding')) {
      encoding = json['Encoding'] as String;
    } else {
      encoding = null;
    }

    if (json.containsKey('ExportDocumentProperties')) {
      exportDocumentProperties = json['ExportDocumentProperties'] as bool;
    } else {
      exportDocumentProperties = null;
    }

    if (json.containsKey('ExportDropDownFormFieldAsText')) {
      exportDropDownFormFieldAsText = json['ExportDropDownFormFieldAsText'] as bool;
    } else {
      exportDropDownFormFieldAsText = null;
    }

    if (json.containsKey('ExportFontResources')) {
      exportFontResources = json['ExportFontResources'] as bool;
    } else {
      exportFontResources = null;
    }

    if (json.containsKey('ExportFontsAsBase64')) {
      exportFontsAsBase64 = json['ExportFontsAsBase64'] as bool;
    } else {
      exportFontsAsBase64 = null;
    }

    if (json.containsKey('ExportHeadersFootersMode')) {
      switch (json['ExportHeadersFootersMode'] as String) {
        case 'None': exportHeadersFootersMode = HtmlSaveOptionsData_ExportHeadersFootersModeEnum.none; break;
        case 'PerSection': exportHeadersFootersMode = HtmlSaveOptionsData_ExportHeadersFootersModeEnum.perSection; break;
        case 'FirstSectionHeaderLastSectionFooter': exportHeadersFootersMode = HtmlSaveOptionsData_ExportHeadersFootersModeEnum.firstSectionHeaderLastSectionFooter; break;
        case 'FirstPageHeaderFooterPerSection': exportHeadersFootersMode = HtmlSaveOptionsData_ExportHeadersFootersModeEnum.firstPageHeaderFooterPerSection; break;
        default: exportHeadersFootersMode = null; break;
      }
    } else {
      exportHeadersFootersMode = null;
    }

    if (json.containsKey('ExportImagesAsBase64')) {
      exportImagesAsBase64 = json['ExportImagesAsBase64'] as bool;
    } else {
      exportImagesAsBase64 = null;
    }

    if (json.containsKey('ExportLanguageInformation')) {
      exportLanguageInformation = json['ExportLanguageInformation'] as bool;
    } else {
      exportLanguageInformation = null;
    }

    if (json.containsKey('ExportListLabels')) {
      switch (json['ExportListLabels'] as String) {
        case 'Auto': exportListLabels = HtmlSaveOptionsData_ExportListLabelsEnum.auto; break;
        case 'AsInlineText': exportListLabels = HtmlSaveOptionsData_ExportListLabelsEnum.asInlineText; break;
        case 'ByHtmlTags': exportListLabels = HtmlSaveOptionsData_ExportListLabelsEnum.byHtmlTags; break;
        default: exportListLabels = null; break;
      }
    } else {
      exportListLabels = null;
    }

    if (json.containsKey('ExportOriginalUrlForLinkedImages')) {
      exportOriginalUrlForLinkedImages = json['ExportOriginalUrlForLinkedImages'] as bool;
    } else {
      exportOriginalUrlForLinkedImages = null;
    }

    if (json.containsKey('ExportPageMargins')) {
      exportPageMargins = json['ExportPageMargins'] as bool;
    } else {
      exportPageMargins = null;
    }

    if (json.containsKey('ExportPageSetup')) {
      exportPageSetup = json['ExportPageSetup'] as bool;
    } else {
      exportPageSetup = null;
    }

    if (json.containsKey('ExportRelativeFontSize')) {
      exportRelativeFontSize = json['ExportRelativeFontSize'] as bool;
    } else {
      exportRelativeFontSize = null;
    }

    if (json.containsKey('ExportRoundtripInformation')) {
      exportRoundtripInformation = json['ExportRoundtripInformation'] as bool;
    } else {
      exportRoundtripInformation = null;
    }

    if (json.containsKey('ExportTextInputFormFieldAsText')) {
      exportTextInputFormFieldAsText = json['ExportTextInputFormFieldAsText'] as bool;
    } else {
      exportTextInputFormFieldAsText = null;
    }

    if (json.containsKey('ExportTocPageNumbers')) {
      exportTocPageNumbers = json['ExportTocPageNumbers'] as bool;
    } else {
      exportTocPageNumbers = null;
    }

    if (json.containsKey('ExportXhtmlTransitional')) {
      exportXhtmlTransitional = json['ExportXhtmlTransitional'] as bool;
    } else {
      exportXhtmlTransitional = null;
    }

    if (json.containsKey('FontResourcesSubsettingSizeThreshold')) {
      fontResourcesSubsettingSizeThreshold = json['FontResourcesSubsettingSizeThreshold'] as int;
    } else {
      fontResourcesSubsettingSizeThreshold = null;
    }

    if (json.containsKey('FontsFolder')) {
      fontsFolder = json['FontsFolder'] as String;
    } else {
      fontsFolder = null;
    }

    if (json.containsKey('FontsFolderAlias')) {
      fontsFolderAlias = json['FontsFolderAlias'] as String;
    } else {
      fontsFolderAlias = null;
    }

    if (json.containsKey('HtmlVersion')) {
      switch (json['HtmlVersion'] as String) {
        case 'Xhtml': htmlVersion = HtmlSaveOptionsData_HtmlVersionEnum.xhtml; break;
        case 'Html5': htmlVersion = HtmlSaveOptionsData_HtmlVersionEnum.html5; break;
        default: htmlVersion = null; break;
      }
    } else {
      htmlVersion = null;
    }

    if (json.containsKey('ImageResolution')) {
      imageResolution = json['ImageResolution'] as int;
    } else {
      imageResolution = null;
    }

    if (json.containsKey('ImagesFolder')) {
      imagesFolder = json['ImagesFolder'] as String;
    } else {
      imagesFolder = null;
    }

    if (json.containsKey('ImagesFolderAlias')) {
      imagesFolderAlias = json['ImagesFolderAlias'] as String;
    } else {
      imagesFolderAlias = null;
    }

    if (json.containsKey('MetafileFormat')) {
      switch (json['MetafileFormat'] as String) {
        case 'Png': metafileFormat = HtmlSaveOptionsData_MetafileFormatEnum.png; break;
        case 'Svg': metafileFormat = HtmlSaveOptionsData_MetafileFormatEnum.svg; break;
        case 'EmfOrWmf': metafileFormat = HtmlSaveOptionsData_MetafileFormatEnum.emfOrWmf; break;
        default: metafileFormat = null; break;
      }
    } else {
      metafileFormat = null;
    }

    if (json.containsKey('OfficeMathOutputMode')) {
      switch (json['OfficeMathOutputMode'] as String) {
        case 'Image': officeMathOutputMode = HtmlSaveOptionsData_OfficeMathOutputModeEnum.image; break;
        case 'MathML': officeMathOutputMode = HtmlSaveOptionsData_OfficeMathOutputModeEnum.mathML; break;
        case 'Text': officeMathOutputMode = HtmlSaveOptionsData_OfficeMathOutputModeEnum.text; break;
        default: officeMathOutputMode = null; break;
      }
    } else {
      officeMathOutputMode = null;
    }

    if (json.containsKey('PrettyFormat')) {
      prettyFormat = json['PrettyFormat'] as bool;
    } else {
      prettyFormat = null;
    }

    if (json.containsKey('ReplaceBackslashWithYenSign')) {
      replaceBackslashWithYenSign = json['ReplaceBackslashWithYenSign'] as bool;
    } else {
      replaceBackslashWithYenSign = null;
    }

    if (json.containsKey('ResolveFontNames')) {
      resolveFontNames = json['ResolveFontNames'] as bool;
    } else {
      resolveFontNames = null;
    }

    if (json.containsKey('ResourceFolder')) {
      resourceFolder = json['ResourceFolder'] as String;
    } else {
      resourceFolder = null;
    }

    if (json.containsKey('ResourceFolderAlias')) {
      resourceFolderAlias = json['ResourceFolderAlias'] as String;
    } else {
      resourceFolderAlias = null;
    }

    if (json.containsKey('ScaleImageToShapeSize')) {
      scaleImageToShapeSize = json['ScaleImageToShapeSize'] as bool;
    } else {
      scaleImageToShapeSize = null;
    }

    if (json.containsKey('TableWidthOutputMode')) {
      switch (json['TableWidthOutputMode'] as String) {
        case 'All': tableWidthOutputMode = HtmlSaveOptionsData_TableWidthOutputModeEnum.all; break;
        case 'RelativeOnly': tableWidthOutputMode = HtmlSaveOptionsData_TableWidthOutputModeEnum.relativeOnly; break;
        case 'None': tableWidthOutputMode = HtmlSaveOptionsData_TableWidthOutputModeEnum.none; break;
        default: tableWidthOutputMode = null; break;
      }
    } else {
      tableWidthOutputMode = null;
    }
  }

  @override
  Map<String, dynamic> serialize() {
    var _result = <String, dynamic>{};
    _result.addAll(super.serialize());
    if (allowNegativeIndent != null) {
      _result['AllowNegativeIndent'] = allowNegativeIndent!;
    }

    if (cssClassNamePrefix != null) {
      _result['CssClassNamePrefix'] = cssClassNamePrefix!;
    }

    if (cssStyleSheetFileName != null) {
      _result['CssStyleSheetFileName'] = cssStyleSheetFileName!;
    }

    if (cssStyleSheetType != null) {
      switch (cssStyleSheetType!) {
        case HtmlSaveOptionsData_CssStyleSheetTypeEnum.inline: _result['CssStyleSheetType'] = 'Inline'; break;
        case HtmlSaveOptionsData_CssStyleSheetTypeEnum.embedded: _result['CssStyleSheetType'] = 'Embedded'; break;
        case HtmlSaveOptionsData_CssStyleSheetTypeEnum.external: _result['CssStyleSheetType'] = 'External'; break;
        default: break;
      }
    }

    if (documentSplitCriteria != null) {
      switch (documentSplitCriteria!) {
        case HtmlSaveOptionsData_DocumentSplitCriteriaEnum.none: _result['DocumentSplitCriteria'] = 'None'; break;
        case HtmlSaveOptionsData_DocumentSplitCriteriaEnum.pageBreak: _result['DocumentSplitCriteria'] = 'PageBreak'; break;
        case HtmlSaveOptionsData_DocumentSplitCriteriaEnum.columnBreak: _result['DocumentSplitCriteria'] = 'ColumnBreak'; break;
        case HtmlSaveOptionsData_DocumentSplitCriteriaEnum.sectionBreak: _result['DocumentSplitCriteria'] = 'SectionBreak'; break;
        case HtmlSaveOptionsData_DocumentSplitCriteriaEnum.headingParagraph: _result['DocumentSplitCriteria'] = 'HeadingParagraph'; break;
        default: break;
      }
    }

    if (documentSplitHeadingLevel != null) {
      _result['DocumentSplitHeadingLevel'] = documentSplitHeadingLevel!;
    }

    if (encoding != null) {
      _result['Encoding'] = encoding!;
    }

    if (exportDocumentProperties != null) {
      _result['ExportDocumentProperties'] = exportDocumentProperties!;
    }

    if (exportDropDownFormFieldAsText != null) {
      _result['ExportDropDownFormFieldAsText'] = exportDropDownFormFieldAsText!;
    }

    if (exportFontResources != null) {
      _result['ExportFontResources'] = exportFontResources!;
    }

    if (exportFontsAsBase64 != null) {
      _result['ExportFontsAsBase64'] = exportFontsAsBase64!;
    }

    if (exportHeadersFootersMode != null) {
      switch (exportHeadersFootersMode!) {
        case HtmlSaveOptionsData_ExportHeadersFootersModeEnum.none: _result['ExportHeadersFootersMode'] = 'None'; break;
        case HtmlSaveOptionsData_ExportHeadersFootersModeEnum.perSection: _result['ExportHeadersFootersMode'] = 'PerSection'; break;
        case HtmlSaveOptionsData_ExportHeadersFootersModeEnum.firstSectionHeaderLastSectionFooter: _result['ExportHeadersFootersMode'] = 'FirstSectionHeaderLastSectionFooter'; break;
        case HtmlSaveOptionsData_ExportHeadersFootersModeEnum.firstPageHeaderFooterPerSection: _result['ExportHeadersFootersMode'] = 'FirstPageHeaderFooterPerSection'; break;
        default: break;
      }
    }

    if (exportImagesAsBase64 != null) {
      _result['ExportImagesAsBase64'] = exportImagesAsBase64!;
    }

    if (exportLanguageInformation != null) {
      _result['ExportLanguageInformation'] = exportLanguageInformation!;
    }

    if (exportListLabels != null) {
      switch (exportListLabels!) {
        case HtmlSaveOptionsData_ExportListLabelsEnum.auto: _result['ExportListLabels'] = 'Auto'; break;
        case HtmlSaveOptionsData_ExportListLabelsEnum.asInlineText: _result['ExportListLabels'] = 'AsInlineText'; break;
        case HtmlSaveOptionsData_ExportListLabelsEnum.byHtmlTags: _result['ExportListLabels'] = 'ByHtmlTags'; break;
        default: break;
      }
    }

    if (exportOriginalUrlForLinkedImages != null) {
      _result['ExportOriginalUrlForLinkedImages'] = exportOriginalUrlForLinkedImages!;
    }

    if (exportPageMargins != null) {
      _result['ExportPageMargins'] = exportPageMargins!;
    }

    if (exportPageSetup != null) {
      _result['ExportPageSetup'] = exportPageSetup!;
    }

    if (exportRelativeFontSize != null) {
      _result['ExportRelativeFontSize'] = exportRelativeFontSize!;
    }

    if (exportRoundtripInformation != null) {
      _result['ExportRoundtripInformation'] = exportRoundtripInformation!;
    }

    if (exportTextInputFormFieldAsText != null) {
      _result['ExportTextInputFormFieldAsText'] = exportTextInputFormFieldAsText!;
    }

    if (exportTocPageNumbers != null) {
      _result['ExportTocPageNumbers'] = exportTocPageNumbers!;
    }

    if (exportXhtmlTransitional != null) {
      _result['ExportXhtmlTransitional'] = exportXhtmlTransitional!;
    }

    if (fontResourcesSubsettingSizeThreshold != null) {
      _result['FontResourcesSubsettingSizeThreshold'] = fontResourcesSubsettingSizeThreshold!;
    }

    if (fontsFolder != null) {
      _result['FontsFolder'] = fontsFolder!;
    }

    if (fontsFolderAlias != null) {
      _result['FontsFolderAlias'] = fontsFolderAlias!;
    }

    if (htmlVersion != null) {
      switch (htmlVersion!) {
        case HtmlSaveOptionsData_HtmlVersionEnum.xhtml: _result['HtmlVersion'] = 'Xhtml'; break;
        case HtmlSaveOptionsData_HtmlVersionEnum.html5: _result['HtmlVersion'] = 'Html5'; break;
        default: break;
      }
    }

    if (imageResolution != null) {
      _result['ImageResolution'] = imageResolution!;
    }

    if (imagesFolder != null) {
      _result['ImagesFolder'] = imagesFolder!;
    }

    if (imagesFolderAlias != null) {
      _result['ImagesFolderAlias'] = imagesFolderAlias!;
    }

    if (metafileFormat != null) {
      switch (metafileFormat!) {
        case HtmlSaveOptionsData_MetafileFormatEnum.png: _result['MetafileFormat'] = 'Png'; break;
        case HtmlSaveOptionsData_MetafileFormatEnum.svg: _result['MetafileFormat'] = 'Svg'; break;
        case HtmlSaveOptionsData_MetafileFormatEnum.emfOrWmf: _result['MetafileFormat'] = 'EmfOrWmf'; break;
        default: break;
      }
    }

    if (officeMathOutputMode != null) {
      switch (officeMathOutputMode!) {
        case HtmlSaveOptionsData_OfficeMathOutputModeEnum.image: _result['OfficeMathOutputMode'] = 'Image'; break;
        case HtmlSaveOptionsData_OfficeMathOutputModeEnum.mathML: _result['OfficeMathOutputMode'] = 'MathML'; break;
        case HtmlSaveOptionsData_OfficeMathOutputModeEnum.text: _result['OfficeMathOutputMode'] = 'Text'; break;
        default: break;
      }
    }

    if (prettyFormat != null) {
      _result['PrettyFormat'] = prettyFormat!;
    }

    if (replaceBackslashWithYenSign != null) {
      _result['ReplaceBackslashWithYenSign'] = replaceBackslashWithYenSign!;
    }

    if (resolveFontNames != null) {
      _result['ResolveFontNames'] = resolveFontNames!;
    }

    if (resourceFolder != null) {
      _result['ResourceFolder'] = resourceFolder!;
    }

    if (resourceFolderAlias != null) {
      _result['ResourceFolderAlias'] = resourceFolderAlias!;
    }

    if (scaleImageToShapeSize != null) {
      _result['ScaleImageToShapeSize'] = scaleImageToShapeSize!;
    }

    if (tableWidthOutputMode != null) {
      switch (tableWidthOutputMode!) {
        case HtmlSaveOptionsData_TableWidthOutputModeEnum.all: _result['TableWidthOutputMode'] = 'All'; break;
        case HtmlSaveOptionsData_TableWidthOutputModeEnum.relativeOnly: _result['TableWidthOutputMode'] = 'RelativeOnly'; break;
        case HtmlSaveOptionsData_TableWidthOutputModeEnum.none: _result['TableWidthOutputMode'] = 'None'; break;
        default: break;
      }
    }

    if (saveFormat != null) {
      _result['SaveFormat'] = saveFormat!;
    }
    return _result;
  }

  @override
  void getFilesContent(List<FileReference> resultFilesContent) {
  }

  @override
  void validate() {
    super.validate();
  }
}

/// Gets or sets the option that controls how the CSS styles are exported.
enum HtmlSaveOptionsData_CssStyleSheetTypeEnum
{ 
  inline,
  embedded,
  external
}

/// Gets or sets the option that controls how the document should be split when saving.
enum HtmlSaveOptionsData_DocumentSplitCriteriaEnum
{ 
  none,
  pageBreak,
  columnBreak,
  sectionBreak,
  headingParagraph
}

/// Gets or sets the option that controls how headers and footers are exported.
enum HtmlSaveOptionsData_ExportHeadersFootersModeEnum
{ 
  none,
  perSection,
  firstSectionHeaderLastSectionFooter,
  firstPageHeaderFooterPerSection
}

/// Gets or sets the option that controls how list labels are exported.
enum HtmlSaveOptionsData_ExportListLabelsEnum
{ 
  auto,
  asInlineText,
  byHtmlTags
}

/// Gets or sets the version of HTML standard, that should be used when saving the document to HTML or MHTML.
/// Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.
enum HtmlSaveOptionsData_HtmlVersionEnum
{ 
  xhtml,
  html5
}

/// Gets or sets the options, that controls in what format metafiles are saved when exporting to HTML, MHTML, or EPUB.
/// The default value is Aspose.Words.Saving.HtmlMetafileFormat.Png, meaning that metafiles are rendered to raster PNG images.
/// Metafiles are not natively displayed by HTML browsers. By default, Aspose.Words converts WMF and EMF images into PNG files when exporting to HTML.Other options are to convert metafiles to SVG images or to export them as is without conversion.
/// Some image transforms, in particular image cropping, will not be applied to metafile images if they are exported to HTML without conversion.
enum HtmlSaveOptionsData_MetafileFormatEnum
{ 
  png,
  svg,
  emfOrWmf
}

/// Gets or sets the option that controls how OfficeMath objects are exported to HTML, MHTML or EPUB. The default value is HtmlOfficeMathOutputMode.Image.
enum HtmlSaveOptionsData_OfficeMathOutputModeEnum
{ 
  image,
  mathML,
  text
}

/// Gets or sets the option that controls how table, row and cell widths are exported.
enum HtmlSaveOptionsData_TableWidthOutputModeEnum
{ 
  all,
  relativeOnly,
  none
}

